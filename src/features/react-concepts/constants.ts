  export const dotnetQuestions = [
    {
      question: 'What is the .NET Framework?',
      answers: [
        '.NET is a Microsoft framework for building Windows, web, and mobile applications.',
        'It provides a large class library called the Framework Class Library (FCL).',
        'It supports multiple languages like C#, VB.NET, and F#.',
        'It runs on the Common Language Runtime (CLR) for execution and memory management.',
        'It enables cross-language integration and code reuse.',
      ],
    },
    {
      question: 'What is CLR (Common Language Runtime)?',
      answers: [
        'CLR is the execution engine of the .NET Framework.',
        'It handles memory management, thread management, and exception handling.',
        'It converts Intermediate Language (IL) code to native machine code.',
        'It enforces type safety and security.',
        'It provides services like garbage collection and code access security.',
      ],
    },
    {
      question:
        'What is the difference between value types and reference types?',
      answers: [
        'Value types store data directly, reference types store references to data.',
        'Value types are stored on the stack, reference types on the heap.',
        'Examples of value types: int, float, bool; reference types: class, string, array.',
        'Value types are copied by value; reference types by reference.',
        'Modifying a reference type affects all references to it.',
      ],
    },
    {
      question:
        'What is the difference between an interface and an abstract class?',
      answers: [
        'Interfaces define contracts; abstract classes provide partial implementation.',
        'A class can implement multiple interfaces but inherit only one abstract class.',
        'Interfaces cannot have constructors; abstract classes can.',
        'Interfaces have only method signatures; abstract classes can have fields and methods.',
        'Use interfaces for capabilities, abstract classes for shared base behavior.',
      ],
    },
    {
      question: 'What is garbage collection in .NET?',
      answers: [
        'Garbage collection automatically frees unused memory.',
        'It runs in the background and reclaims memory from unreachable objects.',
        'It reduces memory leaks and improves performance.',
        'It uses generations (0, 1, 2) to optimize collection frequency.',
        'You can force it using `GC.Collect()`, but it’s usually not recommended.',
      ],
    },
    {
      question: 'What is the difference between EXE and DLL?',
      answers: [
        'EXE is an executable file; DLL is a reusable library.',
        'EXE runs independently; DLL needs a host application.',
        'DLLs promote modularity and code reuse.',
        'EXEs have entry points like `Main()`; DLLs do not.',
        'Multiple applications can share the same DLL.',
      ],
    },
    {
      question: 'What is CTS (Common Type System)?',
      answers: [
        'CTS defines how types are declared and used in .NET.',
        'It ensures type safety across different .NET languages.',
        'It supports both value and reference types.',
        'It enables cross-language interoperability.',
        'All .NET languages must conform to CTS rules.',
      ],
    },
    {
      question: 'What is CLS (Common Language Specification)?',
      answers: [
        'CLS is a subset of CTS that defines language interoperability rules.',
        'It ensures that code written in one .NET language can be used in another.',
        'It restricts features to those common across all .NET languages.',
        'It promotes cross-language compatibility.',
        'CLS-compliant code is more portable and reusable.',
      ],
    },
    {
      question: 'What is MSIL (Microsoft Intermediate Language)?',
      answers: [
        'MSIL is the CPU-independent code generated by .NET compilers.',
        'It is converted to native code by the CLR at runtime.',
        'It includes metadata and instructions for the CLR.',
        'It enables cross-platform execution of .NET code.',
        'It’s also known as CIL (Common Intermediate Language).',
      ],
    },
    {
      question: 'What is the difference between managed and unmanaged code?',
      answers: [
        'Managed code runs under CLR; unmanaged code runs outside CLR.',
        'Managed code benefits from garbage collection and type safety.',
        'Unmanaged code includes native C/C++ code and COM components.',
        'Interop services allow managed code to call unmanaged code.',
        'Unmanaged code requires manual memory management.',
      ],
    },
    {
      question: 'What are assemblies in .NET?',
      answers: [
        'Assemblies are compiled code units in .NET (DLL or EXE).',
        'They contain metadata, IL code, and resources.',
        'They are the building blocks of .NET applications.',
        'Each assembly has a manifest with version and dependency info.',
        'Assemblies can be private or shared (GAC).',
      ],
    },
    {
      question: 'What is the Global Assembly Cache (GAC)?',
      answers: [
        'GAC stores shared .NET assemblies for global access.',
        'It avoids duplication by allowing multiple apps to use the same assembly.',
        'Assemblies must be strongly named to be added to GAC.',
        'Use `gacutil` to install or remove assemblies.',
        'It helps with versioning and security of shared libraries.',
      ],
    },
    {
      question:
        'What is the difference between early binding and late binding?',
      answers: [
        'Early binding resolves method calls at compile time.',
        'Late binding resolves method calls at runtime using reflection.',
        'Early binding is faster and type-safe.',
        'Late binding is flexible but slower and error-prone.',
        'Use late binding when types are unknown at compile time.',
      ],
    },
    {
      question: 'What is boxing and unboxing in .NET?',
      answers: [
        'Boxing converts a value type to an object type.',
        'Unboxing extracts the value type from the object.',
        'Boxing stores the value on the heap.',
        'Unboxing requires explicit casting.',
        'Excessive boxing/unboxing can hurt performance.',
      ],
    },
    {
      question: 'What is the difference between throw and throw ex?',
      answers: [
        '`throw` preserves the original stack trace.',
        '`throw ex` resets the stack trace, losing error context.',
        'Use `throw` to rethrow exceptions properly.',
        '`throw ex` is discouraged unless modifying the exception.',
        'Preserving stack trace helps with debugging.',
      ],
    },
    {
      question: 'What is the difference between Finalize and Dispose?',
      answers: [
        '`Finalize` is called by the GC; `Dispose` is called manually.',
        '`Dispose` is part of the `IDisposable` interface.',
        '`Finalize` is used for unmanaged resource cleanup.',
        '`Dispose` allows deterministic resource release.',
        'Use `using` blocks to auto-call `Dispose()`.',
      ],
    },
    {
      question: 'What is a delegate in .NET?',
      answers: [
        'A delegate is a type-safe function pointer.',
        'It allows methods to be passed as parameters.',
        'Delegates support event handling and callbacks.',
        'They can point to static or instance methods.',
        'Multicast delegates can invoke multiple methods.',
      ],
    },
    {
      question: 'What is an event in .NET?',
      answers: [
        'Events are notifications sent by objects when something happens.',
        'They are based on delegates.',
        'Subscribers register methods to handle events.',
        'Events promote loose coupling between components.',
        'Use `event` keyword to declare events.',
      ],
    },
    {
      question: 'What is LINQ in .NET?',
      answers: [
        'LINQ stands for Language Integrated Query.',
        'It allows querying collections using SQL-like syntax.',
        'It works with arrays, lists, XML, databases, etc.',
        'LINQ improves readability and reduces boilerplate code.',
        'It supports method and query syntax.',
      ],
    },
    {
      question: 'What is async/await in .NET?',
      answers: [
        'They simplify asynchronous programming.',
        '`async` marks a method as asynchronous.',
        '`await` pauses execution until the awaited task completes.',
        'They prevent UI blocking in desktop/web apps.',
        'They work with `Task` and `Task<T>` return types.',
      ],
    },
    {
      question: 'What is dependency injection in .NET?',
      answers: [
        'It’s a design pattern for injecting dependencies into classes.',
        'It promotes loose coupling and testability.',
        'ASP.NET Core has built-in DI support.',
        'Services are registered in the container and injected via constructors.',
        'It supports transient, scoped, and singleton lifetimes.',
      ],
    },
    {
      question: 'What is the difference between Task and Thread?',
      answers: [
        'Task is a higher-level abstraction over threads.',
        'Tasks use the thread pool and are more efficient.',
        'Threads are lower-level and manually managed.',
        'Tasks support cancellation and continuation.',
        'Prefer Task for async operations in modern .NET.',
      ],
    },
    {
      question: 'What is the use of reflection in .NET?',
      answers: [
        'Reflection allows inspecting metadata at runtime.',
        'It can create instances, invoke methods, and access fields dynamically.',
        'It’s used in frameworks, serialization, and testing.',
        'It can impact performance and security.',
        'Use `System.Reflection` namespace for reflection APIs.',
      ],
    },
    {
      question: 'What is the difference between static and singleton?',
      answers: [
        'Static classes cannot be instantiated; singleton classes allow a single instance.',
        'Static members are initialized when the class is loaded; singleton instances are lazily created.',
        'Singletons provide controlled access with instance lifecycle management.',
        'Static classes can’t implement interfaces; singletons can.',
        'Singleton patterns offer more flexibility and testability than static classes.',
      ],
    },
    {
      question: 'What is the difference between web.config and app.config?',
      answers: [
        '`web.config` is used in ASP.NET web apps; `app.config` is used in desktop apps.',
        'Both store configuration settings like connection strings or app settings.',
        '`web.config` supports features like authentication and authorization.',
        'Only one `web.config` can be used per web application.',
        '`app.config` is renamed to `YourApp.exe.config` after compilation.',
      ],
    },
    {
      question:
        'What is the role of Model, View, and Controller in ASP.NET MVC?',
      answers: [
        'Model represents application data and business logic.',
        'View is the user interface that displays data from the model.',
        'Controller handles user input and interacts with the model.',
        'It enables separation of concerns in web applications.',
        'MVC promotes better maintainability and testability.',
      ],
    },
    {
      question: 'What is Entity Framework in .NET?',
      answers: [
        'Entity Framework (EF) is an ORM for .NET to interact with databases.',
        'It allows CRUD operations using C# instead of SQL.',
        'It supports Code First, Database First, and Model First approaches.',
        'EF handles mapping between classes and database tables.',
        'It simplifies data access with LINQ and change tracking.',
      ],
    },
    {
      question: 'What is a NuGet package in .NET?',
      answers: [
        'NuGet is the package manager for .NET.',
        'It allows adding third-party libraries or tools to your projects.',
        'Packages are downloaded from nuget.org or private feeds.',
        'It handles versioning and dependency management.',
        'NuGet CLI or Visual Studio UI can be used to install packages.',
      ],
    },
    {
      question: 'What is middleware in ASP.NET Core?',
      answers: [
        'Middleware is software that handles requests and responses in a pipeline.',
        'Each middleware component can process, modify, or short-circuit a request.',
        'Examples include authentication, logging, and exception handling.',
        'Middleware is configured in `Startup.cs` using `app.Use...()` methods.',
        'Order of middleware registration affects how requests flow.',
      ],
    },
    {
      question: 'How does routing work in ASP.NET Core?',
      answers: [
        'Routing maps URLs to controller actions or endpoints.',
        'You define routes using attributes or route templates in `Startup.cs`.',
        'It supports conventional and attribute-based routing.',
        'Route parameters allow passing data via URLs.',
        'Routing is powered by the endpoint routing system.',
      ],
    },
    {
      question: 'What is Blazor in .NET?',
      answers: [
        'Blazor is a web framework to build interactive UIs using C# instead of JavaScript.',
        'It runs either server-side or client-side via WebAssembly.',
        'Blazor components use Razor syntax (.razor files).',
        'Supports two-way data binding and reusable components.',
        'Blazor promotes full-stack .NET development.',
      ],
    },
    {
      question: 'What is Kestrel in ASP.NET Core?',
      answers: [
        'Kestrel is a cross-platform web server for ASP.NET Core.',
        'It is the default server and built on libuv.',
        'It’s designed for high-performance and lightweight hosting.',
        'It can be used standalone or behind a reverse proxy like IIS or Nginx.',
        'Supports HTTP/1.x, HTTP/2, and HTTPS protocols.',
      ],
    },
    {
      question: 'What is the use of configuration in ASP.NET Core?',
      answers: [
        'Configuration provides a unified way to manage app settings.',
        'Supports multiple sources: JSON, environment variables, command-line, etc.',
        'Defined in `appsettings.json` and accessed via `IConfiguration`.',
        'Can be strongly typed using configuration binding.',
        'Supports hierarchical data structures for complex settings.',
      ],
    },
  ];
  export const aspnetQuestions = [
    {
      question: 'What is ASP.NET Core?',
      answers: [
        'ASP.NET Core is a cross-platform, high-performance framework for building modern web apps.',
        'It’s open-source and runs on Windows, Linux, and macOS.',
        'It unifies MVC, Web API, and Razor Pages into a single framework.',
        'It supports dependency injection, middleware, and modular architecture.',
        'ASP.NET Core is built on the .NET runtime and optimized for cloud and microservices.',
      ],
    },
    {
      question:
        'What are the key differences between ASP.NET and ASP.NET Core?',
      answers: [
        'ASP.NET Core is cross-platform; ASP.NET is Windows-only.',
        'ASP.NET Core is modular and lightweight; ASP.NET is monolithic.',
        'ASP.NET Core uses a unified pipeline for MVC and Web API.',
        'ASP.NET Core supports built-in dependency injection.',
        'ASP.NET Core has better performance and cloud-readiness.',
      ],
    },
    {
      question: 'What is the role of the Startup class in ASP.NET Core?',
      answers: [
        'Startup configures services and the app’s request pipeline.',
        'It contains `ConfigureServices` for DI and `Configure` for middleware.',
        'It’s the entry point for app behavior setup.',
        'You can inject configuration and environment settings into it.',
        'It’s registered in `Program.cs` using `WebApplication.CreateBuilder()`.',
      ],
    },
    {
      question: 'What is middleware in ASP.NET Core?',
      answers: [
        'Middleware are components that handle HTTP requests and responses.',
        'They are executed in the order they’re added in the pipeline.',
        'Common middleware includes routing, authentication, and logging.',
        'You can create custom middleware using `Invoke` or `InvokeAsync`.',
        'Middleware is configured in the `Configure` method of Startup.',
      ],
    },
    {
      question: 'How does dependency injection work in ASP.NET Core?',
      answers: [
        'ASP.NET Core has built-in support for dependency injection (DI).',
        'Services are registered in `ConfigureServices` using `AddSingleton`, `AddScoped`, or `AddTransient`.',
        'Dependencies are injected via constructors or method parameters.',
        'DI promotes loose coupling and testability.',
        'The DI container is available throughout the app lifecycle.',
      ],
    },
    {
      question: 'What are the different lifetimes in dependency injection?',
      answers: [
        '`Singleton`: one instance for the entire app lifetime.',
        '`Scoped`: one instance per HTTP request.',
        '`Transient`: a new instance every time it’s requested.',
        'Choose based on how long the service should live.',
        'Improper lifetime choice can lead to memory leaks or threading issues.',
      ],
    },
    {
      question: 'What is routing in ASP.NET Core?',
      answers: [
        'Routing maps incoming requests to controller actions or endpoints.',
        'It supports attribute-based and conventional routing.',
        'Routes can include parameters like `/products/{id}`.',
        'Routing is configured in `Program.cs` or `Startup.cs`.',
        'Endpoint routing is the modern approach introduced in ASP.NET Core 3.0.',
      ],
    },
    {
      question: 'What is Model Binding in ASP.NET Core?',
      answers: [
        'Model binding maps HTTP request data to action method parameters.',
        'It supports binding from query strings, form data, and route values.',
        'It works with complex types, collections, and custom models.',
        'You can customize it using attributes like `[FromBody]`, `[FromQuery]`, etc.',
        'Model validation is often combined with model binding.',
      ],
    },
    {
      question: 'What is Razor Pages in ASP.NET Core?',
      answers: [
        'Razor Pages is a page-based programming model for building UI.',
        'Each page has a `.cshtml` file and an associated PageModel class.',
        'It simplifies scenarios where MVC is overkill.',
        'It supports routing, model binding, and validation.',
        'Great for building simple, form-based web apps.',
      ],
    },
    {
      question: 'What is the difference between MVC and Razor Pages?',
      answers: [
        'MVC separates concerns into Model, View, and Controller.',
        'Razor Pages uses a page-focused approach with PageModel.',
        'MVC is better for large, complex apps; Razor Pages for simpler UIs.',
        'Both use Razor syntax and share the same underlying framework.',
        'Razor Pages reduces boilerplate for basic CRUD operations.',
      ],
    },
    {
      question: 'How is configuration handled in ASP.NET Core?',
      answers: [
        'Configuration is loaded from multiple sources like JSON, environment variables, and command-line.',
        'The `appsettings.json` file is the default config source.',
        'Use `IConfiguration` to access config values.',
        'Supports hierarchical and strongly typed configuration.',
        'You can reload configuration on change using `reloadOnChange: true`.',
      ],
    },
    {
      question: 'What is logging in ASP.NET Core?',
      answers: [
        'ASP.NET Core has built-in logging via `ILogger<T>`.',
        'Supports multiple providers like Console, Debug, EventSource, and third-party tools.',
        'Logging is configured in `Program.cs` or `appsettings.json`.',
        'You can filter logs by category and level.',
        'Structured logging is supported using scopes and message templates.',
      ],
    },
    {
      question: 'What is Kestrel in ASP.NET Core?',
      answers: [
        'Kestrel is the default cross-platform web server for ASP.NET Core.',
        'It’s lightweight, fast, and built on libuv or sockets.',
        'It can run standalone or behind a reverse proxy like IIS or Nginx.',
        'Supports HTTP/1.x, HTTP/2, and HTTPS.',
        'Configured in `Program.cs` or `appsettings.json`.',
      ],
    },
    {
      question: 'What is the use of appsettings.json?',
      answers: [
        'It stores configuration settings in JSON format.',
        'Commonly used for connection strings, logging, and custom settings.',
        'Supports environment-specific files like `appsettings.Development.json`.',
        'Values can be accessed via `IConfiguration`.',
        'Supports hierarchical structure and nesting.',
      ],
    },
    {
      question: 'What is Entity Framework Core?',
      answers: [
        'EF Core is a lightweight, cross-platform ORM for .NET.',
        'It supports LINQ queries, change tracking, and migrations.',
        'Works with multiple databases like SQL Server, PostgreSQL, and SQLite.',
        'Supports Code First and Database First approaches.',
        'Integrated with ASP.NET Core for data access.',
      ],
    },
    {
      question: 'What are migrations in EF Core?',
      answers: [
        'Migrations manage schema changes in the database.',
        'They are created using `Add-Migration` or `dotnet ef migrations add`.',
        'Use `Update-Database` to apply migrations.',
        'They help keep the database in sync with your models.',
        'Migrations are version-controlled and reversible.',
      ],
    },
    {
      question: 'How is authentication handled in ASP.NET Core?',
      answers: [
        'ASP.NET Core supports cookie, JWT, and third-party authentication.',
        'Use `AddAuthentication()` and `AddAuthorization()` in `Program.cs`.',
        'Identity framework provides user management out of the box.',
        'Supports external providers like Google, Facebook, and Microsoft.',
        'Policies and roles can be used for fine-grained access control.',
      ],
    },
    {
      question: 'What is authorization in ASP.NET Core?',
      answers: [
        'Authorization determines what a user can access.',
        'Supports role-based and policy-based authorization.',
        'Use `[Authorize]` attribute to protect controllers or actions.',
        'Policies can include custom requirements and handlers.',
        'Authorization is enforced after authentication.',
      ],
    },
    {
      question:
        'What is the difference between AddSingleton, AddScoped, and AddTransient?',
      answers: [
        '`AddSingleton` creates one instance for the app lifetime.',
        '`AddScoped` creates one instance per HTTP request.',
        '`AddTransient` creates a new instance every time it’s requested.',
        'Choose based on how long the service should live.',
        'Improper use can lead to memory leaks or threading issues.',
      ],
    },
    {
      question: 'What is the purpose of Program.cs in ASP.NET Core?',
      answers: [
        'It’s the entry point of the application.',
        'It configures the web host and services.',
        'Defines the middleware pipeline using `builder` and `app`.',
        'Replaces `Startup.cs` in minimal hosting model.',
        'You can customize logging, DI, and configuration here.',
      ],
    },
    {
      question: 'What is minimal API in ASP.NET Core?',
      answers: [
        'Minimal APIs allow building HTTP APIs with minimal setup.',
        'They use top-level statements and lambda expressions.',
        'Great for microservices and lightweight endpoints.',
        'No need for controllers or attributes.',
        'Introduced in .NET 6 for simplicity and performance.',
      ],
    },
    {
      question: 'What is CORS and how is it handled in ASP.NET Core?',
      answers: [
        'CORS (Cross-Origin Resource Sharing) controls access to resources from different origins.',
        'ASP.NET Core enables CORS using `services.AddCors()` and `app.UseCors()`.',
        'You can define policies to allow specific origins, headers, and methods.',
        'It’s essential for APIs accessed from browsers on different domains.',
        'Use attributes like `[EnableCors]` to apply policies to controllers or actions.',
      ],
    },
    {
      question:
        'What is the difference between synchronous and asynchronous methods?',
      answers: [
        'Synchronous methods block the thread until the task is complete.',
        'Asynchronous methods use `async`/`await` and free the thread while waiting.',
        'Async improves scalability and responsiveness, especially for I/O tasks.',
        'Use `Task` and `Task<T>` as return types for async methods.',
        'Avoid blocking async code with `.Result` or `.Wait()` to prevent deadlocks.',
      ],
    },
    {
      question: 'How is exception handling managed in ASP.NET Core?',
      answers: [
        'Use `try/catch` blocks to handle exceptions locally.',
        'Global exception handling is done via `UseExceptionHandler()` middleware.',
        'Custom error pages and logging can be configured in `Program.cs`.',
        'Use `ILogger` to log exceptions with context.',
        'Consider using filters like `ExceptionFilterAttribute` for cross-cutting concerns.',
      ],
    },
    {
      question: 'What are filters in ASP.NET Core MVC?',
      answers: [
        'Filters are used to run code before or after action methods.',
        'Types include Authorization, Action, Result, Resource, and Exception filters.',
        'They provide a way to handle cross-cutting concerns like logging or caching.',
        'You can register filters globally, at controller, or action level.',
        'Custom filters can be created by implementing filter interfaces.',
      ],
    },
    {
      question: 'What is output caching in ASP.NET Core?',
      answers: [
        'Output caching stores the response and reuses it to reduce load.',
        'ASP.NET Core supports response caching middleware.',
        'Use `[ResponseCache]` attribute to control caching at controller/action level.',
        'Headers like `Cache-Control` and `ETag` influence client-side caching.',
        'Improves performance by avoiding repeated computation for the same content.',
      ],
    },
    {
      question: 'What is gRPC and how does ASP.NET Core support it?',
      answers: [
        'gRPC is a high-performance, contract-first RPC protocol by Google.',
        'ASP.NET Core supports gRPC natively using Protocol Buffers (.proto files).',
        'It’s ideal for microservices and real-time communication.',
        'gRPC services are strongly typed and support streaming.',
        'Use `AddGrpc()` and `MapGrpcService<T>()` to configure endpoints.',
      ],
    },
    {
      question: 'What is SignalR in ASP.NET Core?',
      answers: [
        'SignalR enables real-time web communication using WebSockets or fallbacks.',
        'It abstracts away transport mechanisms for push messaging.',
        'Useful for live chat, dashboards, and notifications.',
        'Configure with `AddSignalR()` and map with `MapHub<T>()`.',
        'Clients connect using the JavaScript or .NET SignalR library.',
      ],
    },
    {
      question: 'How do you secure Web APIs in ASP.NET Core?',
      answers: [
        'Use JWT Bearer authentication or API keys.',
        'Secure endpoints using `[Authorize]` attributes.',
        'Validate tokens in middleware using `AddAuthentication()`.',
        'Enable HTTPS and configure CORS policies.',
        'Log and monitor suspicious requests for added security.',
      ],
    },
    {
      question: 'What is the purpose of Data Annotations in ASP.NET Core?',
      answers: [
        'Data Annotations provide metadata for validation and display.',
        'Attributes like `[Required]`, `[MaxLength]`, and `[Range]` enforce rules.',
        'Used in models for automatic validation in forms and APIs.',
        'Client-side validation can be enabled using jQuery Unobtrusive Validation.',
        'Custom validation attributes can also be created.',
      ],
    },
    {
      question: 'What is health check middleware in ASP.NET Core?',
      answers: [
        'Health checks report the health status of the app or services.',
        'Use `AddHealthChecks()` in services and `MapHealthChecks()` in routing.',
        'Can monitor databases, dependencies, or custom checks.',
        'Helpful in container orchestration and cloud deployment scenarios.',
        'Returns standard HTTP status codes and JSON results.',
      ],
    },
  ];
  export const sqlserverQuestions = [
    {
      question: 'What is SQL Server?',
      answers: [
        'SQL Server is a relational database management system developed by Microsoft.',
        'It stores and retrieves data as requested by applications.',
        'It supports T-SQL for querying and managing data.',
        'It includes tools for reporting, integration, and analytics.',
        'SQL Server is widely used in enterprise environments for data storage and processing.',
      ],
    },
    {
      question: 'What are the different types of joins in SQL Server?',
      answers: [
        'INNER JOIN returns rows with matching values in both tables.',
        'LEFT JOIN returns all rows from the left table and matched rows from the right.',
        'RIGHT JOIN returns all rows from the right table and matched rows from the left.',
        'FULL OUTER JOIN returns all rows when there is a match in either table.',
        'CROSS JOIN returns the Cartesian product of both tables.',
      ],
    },
    {
      question: 'What is normalization and why is it important?',
      answers: [
        'Normalization organizes data to reduce redundancy and improve integrity.',
        'It divides large tables into smaller, related ones.',
        'It helps eliminate anomalies in insert, update, and delete operations.',
        'Common forms include 1NF, 2NF, and 3NF.',
        'It improves database efficiency and consistency.',
      ],
    },
    {
      question: 'What is a primary key?',
      answers: [
        'A primary key uniquely identifies each record in a table.',
        'It cannot contain NULL values.',
        'Each table can have only one primary key.',
        'It can consist of one or more columns (composite key).',
        'It enforces entity integrity in the database.',
      ],
    },
    {
      question: 'What is a foreign key?',
      answers: [
        'A foreign key links one table to another by referencing a primary key.',
        'It enforces referential integrity between tables.',
        'It can accept NULLs unless explicitly restricted.',
        'It prevents actions that would destroy links between tables.',
        'Used to model relationships like one-to-many or many-to-one.',
      ],
    },
    {
      question: 'What is the difference between DELETE, TRUNCATE, and DROP?',
      answers: [
        'DELETE removes specific rows and can be rolled back.',
        'TRUNCATE removes all rows and resets identity columns.',
        'DROP deletes the entire table structure and data.',
        'DELETE triggers are fired; TRUNCATE does not.',
        'DROP is irreversible and removes dependencies.',
      ],
    },
    {
      question: 'What are indexes in SQL Server?',
      answers: [
        'Indexes improve query performance by speeding up data retrieval.',
        'Clustered indexes sort and store data rows in the table.',
        'Non-clustered indexes store pointers to the actual data.',
        'Too many indexes can slow down write operations.',
        'You can create filtered and composite indexes for optimization.',
      ],
    },
    {
      question: 'What is a stored procedure?',
      answers: [
        'A stored procedure is a precompiled collection of SQL statements.',
        'It can accept input/output parameters.',
        'It improves performance and promotes code reuse.',
        'Stored procedures can contain logic like IF, WHILE, and transactions.',
        'They help encapsulate business logic in the database.',
      ],
    },
    {
      question: 'What is a view in SQL Server?',
      answers: [
        'A view is a virtual table based on a SELECT query.',
        'It simplifies complex queries and hides data complexity.',
        'Views can be used for security by exposing only specific columns.',
        'They do not store data physically.',
        'Indexed views can improve performance in some scenarios.',
      ],
    },
    {
      question: 'What is a trigger in SQL Server?',
      answers: [
        'A trigger is a special procedure that runs automatically in response to events.',
        'It can be fired on INSERT, UPDATE, or DELETE operations.',
        'Triggers enforce business rules and data integrity.',
        'They can be AFTER or INSTEAD OF triggers.',
        'Excessive use of triggers can lead to performance issues.',
      ],
    },
    {
      question: 'What is a transaction?',
      answers: [
        'A transaction is a unit of work that is either fully completed or rolled back.',
        'It ensures data consistency using ACID properties.',
        'Use BEGIN TRANSACTION, COMMIT, and ROLLBACK to manage transactions.',
        'Nested transactions are supported but only the outermost commit is final.',
        'Transactions help prevent partial updates in case of failure.',
      ],
    },
    {
      question: 'What are ACID properties?',
      answers: [
        'Atomicity ensures all operations in a transaction are completed or none.',
        'Consistency ensures the database remains valid before and after the transaction.',
        'Isolation ensures concurrent transactions don’t interfere with each other.',
        'Durability ensures committed changes are permanent.',
        'ACID guarantees reliable processing of database transactions.',
      ],
    },
    {
      question:
        'What is the difference between clustered and non-clustered index?',
      answers: [
        'Clustered index determines the physical order of data in the table.',
        'Each table can have only one clustered index.',
        'Non-clustered index stores pointers to the data rows.',
        'You can have multiple non-clustered indexes per table.',
        'Clustered indexes are faster for range queries.',
      ],
    },
    {
      question: 'What is the use of the GROUP BY clause?',
      answers: [
        'GROUP BY groups rows that have the same values in specified columns.',
        'It is used with aggregate functions like COUNT, SUM, AVG.',
        'It helps summarize data into meaningful categories.',
        'HAVING clause is used to filter grouped results.',
        'GROUP BY must include all non-aggregated columns in SELECT.',
      ],
    },
    {
      question: 'What is a CTE (Common Table Expression)?',
      answers: [
        'CTE is a temporary result set defined using WITH clause.',
        'It improves readability and modularity of complex queries.',
        'CTEs can be recursive for hierarchical data.',
        'They exist only during the execution of a single query.',
        'CTEs can be used in SELECT, INSERT, UPDATE, and DELETE.',
      ],
    },
    {
      question: 'What is the difference between WHERE and HAVING?',
      answers: [
        'WHERE filters rows before grouping.',
        'HAVING filters groups after aggregation.',
        'WHERE can’t use aggregate functions; HAVING can.',
        'Both can be used together in a query.',
        'Use WHERE for raw data filtering and HAVING for grouped data.',
      ],
    },
    {
      question: 'What is a subquery?',
      answers: [
        'A subquery is a query nested inside another query.',
        'It can return a single value or a set of values.',
        'Subqueries can be used in SELECT, FROM, or WHERE clauses.',
        'They can be correlated or non-correlated.',
        'Subqueries help break down complex logic into manageable parts.',
      ],
    },
    {
      question: 'What is the difference between UNION and UNION ALL?',
      answers: [
        'UNION removes duplicate rows from the result set.',
        'UNION ALL includes all rows, including duplicates.',
        'UNION is slower due to the distinct operation.',
        'Both require the same number and type of columns.',
        'Use UNION ALL when duplicates are acceptable and performance matters.',
      ],
    },
    {
      question: 'What is indexing and how does it improve performance?',
      answers: [
        'Indexing speeds up data retrieval by reducing the number of rows scanned.',
        'Indexes create a data structure for quick lookups.',
        'They are especially useful on large tables and frequently queried columns.',
        'Too many indexes can slow down inserts and updates.',
        'Proper indexing strategy is key to query optimization.',
      ],
    },
    {
      question: 'What is SQL Profiler?',
      answers: [
        'SQL Profiler is a tool to monitor and analyze SQL Server activity.',
        'It captures events like queries, logins, and errors.',
        'Useful for debugging and performance tuning.',
        'Can be used to audit and trace user activity.',
        'It’s deprecated in favor of Extended Events in newer versions.',
      ],
    },
    {
      question:
        'What is the difference between CHAR and VARCHAR in SQL Server?',
      answers: [
        'CHAR is fixed-length; VARCHAR is variable-length.',
        'CHAR uses more space when storing shorter strings.',
        'VARCHAR is more efficient for varying-length data.',
        'Both have a maximum length of 8000 characters (or 2GB for MAX types).',
        'Choose CHAR when all values are the same length for faster access.',
      ],
    },
    {
      question: 'What are the different isolation levels in SQL Server?',
      answers: [
        'Read Uncommitted allows dirty reads—no shared locks are issued.',
        'Read Committed prevents dirty reads by using shared locks.',
        'Repeatable Read prevents non-repeatable reads but allows phantom rows.',
        'Serializable prevents phantom rows—most restrictive and safest.',
        'Snapshot isolation uses row versions to avoid blocking reads.',
      ],
    },
    {
      question: 'How do you optimize SQL queries for performance?',
      answers: [
        'Use proper indexing on frequently queried columns.',
        'Avoid SELECT *—fetch only required columns.',
        'Write sargable WHERE clauses to enable index usage.',
        'Use JOINs wisely and avoid unnecessary nested subqueries.',
        'Analyze query plans with Execution Plans or Query Store.',
      ],
    },
    {
      question: 'What is the use of the RANK() function in SQL Server?',
      answers: [
        'RANK() provides a ranking of rows within a partition.',
        'It assigns the same rank for ties, with gaps in subsequent ranks.',
        'It’s commonly used for pagination or top-N queries.',
        'It works with ORDER BY and PARTITION BY clauses.',
        'RANK(), DENSE_RANK(), and ROW_NUMBER() offer different ranking behaviors.',
      ],
    },
    {
      question:
        'What is the difference between TEMP tables and TABLE variables?',
      answers: [
        'TEMP tables are created in tempdb and support indexes.',
        'TABLE variables are stored in memory and are lightweight.',
        'TEMP tables survive multiple batches; TABLE variables do not.',
        'Use TEMP tables for larger or more complex result sets.',
        'Scope and performance vary depending on use case and query plan.',
      ],
    },
    {
      question: 'What is SQL Injection and how do you prevent it?',
      answers: [
        'SQL Injection is a security attack that exploits input vulnerabilities.',
        'It allows attackers to execute arbitrary SQL commands.',
        'Use parameterized queries or stored procedures to avoid it.',
        'Validate and sanitize all user inputs.',
        'Avoid dynamic SQL whenever possible, or escape it properly.',
      ],
    },
    {
      question: 'What is the difference between INNER JOIN and LEFT JOIN?',
      answers: [
        'INNER JOIN returns only rows with matching keys in both tables.',
        'LEFT JOIN returns all rows from the left table and matches from the right.',
        'LEFT JOIN fills unmatched right rows with NULLs.',
        'INNER JOIN reduces result size; LEFT JOIN preserves left-side completeness.',
        'Choose based on whether unmatched rows are needed in results.',
      ],
    },
    {
      question: 'What are scalar and aggregate functions?',
      answers: [
        'Scalar functions return a single value per row (e.g., UPPER(), LEN()).',
        'Aggregate functions operate on groups of rows (e.g., COUNT(), SUM()).',
        'Scalar functions are used in SELECT or WHERE clauses.',
        'Aggregate functions are used with GROUP BY or HAVING clauses.',
        'Both can be combined in complex queries for summaries and formatting.',
      ],
    },
    {
      question: 'What is the use of COALESCE and ISNULL?',
      answers: [
        'Both return the first non-null value from a list of expressions.',
        'ISNULL handles two expressions; COALESCE handles multiple.',
        'COALESCE conforms to ANSI SQL and handles data type precedence.',
        'ISNULL is simpler and slightly faster in SQL Server.',
        'Use them to substitute default values for NULLs.',
      ],
    },
    {
      question: 'How do you handle errors in SQL Server?',
      answers: [
        'Use TRY...CATCH blocks for structured error handling.',
        'Log errors using RAISERROR or THROW for diagnostics.',
        'Check for @@ERROR immediately after each statement for legacy methods.',
        'Use XACT_ABORT ON to terminate batch on unhandled errors.',
        'Design transactions to roll back gracefully on failure.',
      ],
    },
  ];
  export const reactQuestions = [
    {
      question: 'In NextJS, when does middleware run? Which are the scenarios?',
      answers: [
        'Before routing occurs — middleware intercepts requests.',
        'It applies to API routes and page loads.',
        'It also runs on client-side navigations like <Link> transitions.',
        'Does not run for static files (like /public assets).',
      ],
    },
    {
      question: 'What is ()() in react?',
      answers: [
        'Its a function that returns another function, which is then immediately called.',
        'Often seen in higher-order functions or closures in React code.',
        'Useful for initializing logic without polluting the top level.',
        'Helps create private scopes or config-driven functions.',
      ],
    },
    {
      question: 'What is React Query or TanStack Query?',
      answers: [
        'It’s a data-fetching library that simplifies server state management in React.',
        'Automatically handles caching, background updates, and syncing with the server.',
        'Reduces boilerplate code for API calls and loading states.',
        'Great for building highly responsive and resilient UIs.',
      ],
    },
    {
      question: 'What is AbortController in axios?',
      answers: [
        'AbortController lets you cancel Axios requests before they complete.',
        'You create a controller and pass its signal to the Axios config.',
        'Calling controller.abort() stops the request and triggers a catch block.',
        'It replaces the deprecated CancelToken API in Axios 0.22.0 and above',
        'Useful for cleaning up requests in useEffect or avoiding race conditions in React.',
      ],
    },
    {
      question: 'What is debouncing and throttling?',
      answers: [
        'Debouncing delays a function call until after a pause in events, like waiting for typing to stop.',
        'Throttling limits a function to run at most once every set interval, no matter how often its triggered.',
        'Debounce is great for input fields or resize events—less noise, more control.',
        'Throttle works well for scroll events or continuous user actions—smooth and efficient.',
      ],
    },
    {
      question: 'What is prefetching in React?',
      answers: [
        'Prefetching is the process of loading resources (like code or data) before they’re actually needed.',
        'It improves perceived performance by making future navigations faster.',
        'React frameworks like Next.js offer built-in prefetching for route-based code splitting.',
        'It reduces load time by downloading assets in the background during idle time.',
      ],
    },
    {
      question: 'What is !! in React?',
      answers: [
        '!! is a double negation used to convert any value into a strict boolean (true or false).',
        'It helps React conditionally render components by evaluating truthiness explicitly.',
        '!!value is often used in JSX expressions to ensure only true values trigger rendering.',
        'Its a quick way to cleanly force a truthy/falsy value into a true/false type.',
        'Common in checks like !!user && <Dashboard /> to render only when user exists.',
      ],
    },
    {
      question: 'What is pre tag?',
      answers: [
        'The <pre> tag preserves whitespace, tabs, and line breaks as written in the HTML.',
        'It displays content in a fixed-width font like monospace by default.',
        'Ideal for showing code blocks, poems, or ASCII art where formatting matters.',
        'HTML inside <pre> isn’t rendered—its treated as plain text unless escaped.',
        'Great for creating readable layouts without extra CSS or manual spacing.',
      ],
    },
    {
      question: 'What is Concurrent Rendering?',
      answers: [
        'Concurrent Rendering enables React to prepare multiple UI updates without blocking the main thread.',
        'It allows React to interrupt, pause, and resume rendering tasks for a smoother user experience.',
        'Helps apps remain responsive even during heavy rendering or state transitions.',
        'Powers features like useTransition, Suspense, and startTransition for fluid UI updates.',
        'Introduced with React 18 to make rendering smarter and more adaptive to user interaction.',
      ],
    },
    {
      question: 'What is Memoization in React?',
      answers: [
        'Memoization is an optimization technique to cache and reuse results of expensive computations.',
        'React provides React.memo() to prevent re-rendering of components when props haven’t changed.',
        'The useMemo() hook stores the result of a function and recomputes it only when dependencies change.',
        'It improves performance by avoiding unnecessary recalculations and re-renders.',
        'Use it wisely—overusing memoization can add complexity without real benefits.',
      ],
    },
    {
      question: 'How to take care of XSS (Cross site scripting) in React?',
      answers: [
        'Avoid using dangerouslySetInnerHTML unless absolutely necessary.',
        'Always validate and sanitize any user input on the server side.',
        'Use libraries like DOMPurify to clean HTML content before rendering.',
        'Prefer Reacts default rendering—it auto-escapes content to prevent injection.',
        'Set proper HTTP security headers like Content-Security-Policy for added protection.',
      ],
    },
    {
      question: 'What is Virtual DOM in React?',
      answers: [
        'The Virtual DOM is a lightweight JavaScript representation of the real DOM.',
        'React uses it to efficiently track and batch UI changes before updating the actual DOM.',
        'It minimizes costly DOM operations, improving performance and responsiveness.',
        'When state or props change, React re-renders the Virtual DOM and compares it with the previous version.',
        'Only the changed elements are updated in the real DOM using a process called reconciliation.',
      ],
    },
    {
      question: 'What is hydration in React?',
      answers: [
        'Hydration is the process of attaching React’s event listeners to server-rendered HTML.',
        'It enables client-side interactivity on pages pre-rendered by the server (SSR).',
        'React uses ReactDOM.hydrate() to reconcile the static HTML with Reacts virtual DOM.',
        'Hydration improves performance by avoiding full re-renders on initial page load.',
      ],
    },
    {
      question: 'What is dynamic import in React?',
      answers: [
        'It allows you to load components or modules only when theyre needed using import().',
        'Boosts performance by splitting code and reducing the initial bundle size.',
        'Often used with React.lazy() for on-demand component loading.',
        'Helps improve load times, especially for large or rarely used features.',
        'Works seamlessly with tools like Suspense for fallback UI during loading.',
      ],
    },
    {
      question: 'When to use Webhooks and Websockets in React?',
      answers: [
        'Use Webhooks for one-way, server-to-client communication triggered by specific events.',
        'Use WebSockets for two-way, real-time communication like chats or live dashboards.',
        'Webhooks are ideal for low-frequency updates that don’t require a persistent connection.',
        'WebSockets shine in high-frequency, latency-sensitive apps that demand constant updates.',
        'Choose Webhooks for simplicity and scalability; go for WebSockets when you need interaction and immediacy.',
      ],
    },
    {
      question: 'How to implement Websocket in React?',
      answers: [
        'Create a WebSocket connection using new WebSocket(url) inside a useEffect.',
        'Add event listeners for onopen, onmessage, and onclose to handle socket events.',
        'Use useState to store and update data received from the server.',
        'Clean up the socket on unmount with a return function in useEffect.',
        'Send messages through socket.send() based on user actions or state changes.',
      ],
    },
    {
      question: 'How to implement Welhooks in React?',
      answers: [
        'Set up a backend server (like Node.js) to receive and process webhook events.',
        'Use fetch or axios in React to send data to your webhook endpoint.',
        'Secure your webhook with secret tokens or signature verification.',
        'Use useEffect to trigger webhook calls on specific state or prop changes.',
        'For easier integration, explore libraries like react-use-webhook or custom hooks.',
      ],
    },
    {
      question: 'What is the use of react-window in React?',
      answers: [
        'It efficiently renders large lists and grids by only rendering visible items.',
        'Greatly improves performance by minimizing DOM nodes at any given time.',
        'Supports both fixed-size and variable-size items in vertical or horizontal layouts.',
        'Perfect for virtualizing long scrollable content without lag.',
        'Lightweight and faster alternative to heavier libraries like react-virtualized.',
      ],
    },
    {
      question: 'How to implement tree shaking in React to remove unused code?',
      answers: [
        'Use ES6 import/export syntax, as its necessary for tree shaking to work.',
        'Build your project with a bundler like Webpack or Vite that supports tree shaking.',
        'Set Webpack’s mode to production to enable dead code elimination.',
        'Avoid using require() or dynamic imports unless necessary—they break tree shaking.',
      ],
    },

    {
      question:
        'Explain the difference between functional and class components.',
      answers: [
        'Functional components are plain JavaScript functions; class components use ES6 classes.',
        'Functional components use hooks for state and lifecycle features.',
        'Class components use `this.state` and lifecycle methods like `componentDidMount()`.',
        'Functional components are shorter and easier to test.',
        'React encourages using functional components for better performance and cleaner syntax.',
      ],
    },
    {
      question: 'What are React Hooks? Name a few commonly used ones.',
      answers: [
        'Hooks are functions that let functional components use state and lifecycle features.',
        'They avoid class components by enabling logic reuse via simple functions.',
        '`useState`, `useEffect`, and `useContext` are among the most used hooks.',
        'Hooks simplify component logic and state sharing.',
        'Custom hooks let you extract reusable logic from components.',
      ],
    },
    {
      question: 'How does useEffect work and when should you use it?',
      answers: [
        '`useEffect` runs side effects after rendering, like fetching data or setting up subscriptions.',
        'It takes a function and a dependency array to control when it runs.',
        'Runs after every render by default, or only when dependencies change.',
        'Can return a cleanup function for things like event listeners or intervals.',
        'Great for data fetching, subscriptions, and DOM manipulations.',
      ],
    },
    {
      question: 'What is the purpose of useMemo and useCallback?',
      answers: [
        '`useMemo` memoizes the result of a computation to avoid recalculating.',
        '`useCallback` memoizes a function so its reference doesn’t change on re-renders.',
        'Both improve performance by preventing unnecessary work or rendering.',
        'Useful in dependency arrays where reference equality matters.',
        'Don’t overuse them—only optimize when there’s a performance impact.',
      ],
    },
    {
      question: 'How does React handle state management?',
      answers: [
        'React manages state locally within components using `useState` or `this.state`.',
        'For shared state, React Context or libraries like Redux are used.',
        'State updates trigger re-renders to reflect changes in the UI.',
        'State can be primitive, object, or array types.',
        'React DevTools help inspect and debug component states.',
      ],
    },
    {
      question: 'What is the difference between props and state?',
      answers: [
        'Props are passed from parent to child components.',
        'State is managed internally by the component.',
        'Props are immutable from the child’s perspective.',
        'State changes trigger re-renders, props don’t unless changed by parent.',
        'Use props for configuration and state for internal data.',
      ],
    },
    {
      question: 'What is React Context and how do you use it?',
      answers: [
        'React Context provides a way to pass data through the component tree.',
        'It avoids prop drilling by providing a global-like data source.',
        'Use `createContext` and `useContext` to consume values easily.',
        'Useful for theme, language, or auth info across the app.',
        'Wrap components with a Provider to share context values.',
      ],
    },
    {
      question: 'How does React handle form inputs?',
      answers: [
        'React treats inputs as controlled or uncontrolled components.',
        'Controlled components use `useState` to manage value and updates.',
        'Uncontrolled components use `ref` to access DOM input values.',
        'Form state is typically updated on `onChange` events.',
        'Validation can be added manually or via libraries like Formik.',
      ],
    },
    {
      question: 'What is reconciliation in React?',
      answers: [
        'Reconciliation is React’s process of updating the DOM efficiently.',
        'It compares the new virtual DOM with the old one.',
        'React updates only the parts of the DOM that actually changed.',
        'This diffing algorithm helps achieve fast UI updates.',
        'Keys in lists help React identify changed elements quickly.',
      ],
    },
    {
      question: 'What is the role of keys in lists?',
      answers: [
        'Keys help React identify which items changed, added, or removed.',
        'They ensure stable identity of elements across renders.',
        'Keys should be unique among siblings.',
        'Using index as key is discouraged unless list is static.',
        'Missing or duplicate keys can cause rendering issues.',
      ],
    },
    {
      question: 'How does React handle conditional rendering?',
      answers: [
        'React uses plain JavaScript conditions inside JSX.',
        'Ternary operators or logical `&&` are commonly used.',
        'You can return `null` to render nothing conditionally.',
        'Custom functions or components can encapsulate conditional logic.',
        '`if` statements outside JSX also work for rendering decisions.',
      ],
    },
    {
      question: 'What is React.memo() and when should you use it?',
      answers: [
        '`React.memo()` is a HOC that prevents re-renders of pure functional components.',
        'It memoizes the rendered output unless props change.',
        'Best used for performance-sensitive components.',
        'It does shallow comparison of props.',
        'It won’t help with deeply nested prop changes unless handled manually.',
      ],
    },
    {
      question: 'What is Next.js and how is it different from React?',
      answers: [
        'Next.js is a React framework for server-side rendering and full-stack features.',
        'It adds routing, SSR/SSG, and API handling out of the box.',
        'React is a UI library; Next.js builds full applications on top of React.',
        'Next.js handles performance optimizations and SEO better.',
        'It enables hybrid rendering modes and advanced tooling.',
      ],
    },
    {
      question: 'Explain the difference between SSR, SSG, and ISR in Next.js.',
      answers: [
        'SSR (Server-Side Rendering) renders pages on each request.',
        'SSG (Static Site Generation) pre-builds pages at build time.',
        'ISR (Incremental Static Regeneration) updates static pages after deployment.',
        'SSG is fast but static; SSR is dynamic but slower.',
        'ISR gives the best of both by serving static pages that can refresh.',
      ],
    },
    {
      question:
        'What are getStaticProps, getServerSideProps, and getInitialProps?',
      answers: [
        '`getStaticProps` fetches data at build time for SSG.',
        '`getServerSideProps` fetches data on every request for SSR.',
        '`getInitialProps` runs on server/client and is older and less recommended.',
        'All are used to prepopulate props for a page component.',
        'Only used in page-level components, not regular ones.',
      ],
    },
    {
      question: 'How does file-based routing work in Next.js?',
      answers: [
        'Each file in the `pages/` folder becomes a route automatically.',
        'File names match URL paths (e.g., `pages/about.js` → `/about`).',
        'Nested folders create nested routes.',
        'Dynamic routes use square brackets (e.g., `[id].js`).',
        'No need for external routing libraries like React Router.',
      ],
    },
    {
      question: 'What is dynamic routing and how is it implemented?',
      answers: [
        'Dynamic routes handle variable path segments like `/user/123`.',
        'Use brackets like `[id].js` in `pages/` to define them.',
        'You access params using `useRouter()` or `getStaticPaths()`.',
        'Supports fallback and catch-all routes too.',
        'Helps build user or content-based pages dynamically.',
      ],
    },
    {
      question: 'How do you create API routes in Next.js?',
      answers: [
        'API routes are files in the `pages/api` directory.',
        'Each file exports a handler function for HTTP requests.',
        'They support all HTTP verbs like GET, POST, PUT, DELETE.',
        'Useful for backend logic without a separate server.',
        'Endpoints are available under `/api/` by default.',
      ],
    },
    {
      question: 'What is image optimization in Next.js?',
      answers: [
        'Next.js provides an `<Image>` component for responsive and optimized images.',
        'Images are lazy-loaded and resized based on the device.',
        'Automatic WebP conversion improves performance.',
        'Images can come from local or remote sources.',
        'Helps with performance, core web vitals, and SEO.',
      ],
    },
    {
      question: 'How does Next.js handle environment variables?',
      answers: [
        'Use `.env.local`, `.env.production` etc. to define env variables.',
        'Prefix variables with `NEXT_PUBLIC_` to expose them to the browser.',
        'Access them via `process.env.NAME` in code.',
        'Variables must be available at build time for static rendering.',
        'Can differentiate configs based on the build environment.',
      ],
    },
    {
      question: 'What is middleware in Next.js and how is it used?',
      answers: [
        'Middleware runs before a request is completed.',
        'Useful for auth checks, redirects, logging, or modifying headers.',
        'Defined in the `middleware.js` file at the project root.',
        'It runs at the edge for faster execution.',
        'Supports matching specific paths using a config.',
      ],
    },
    {
      question: 'How do you implement authentication in a Next.js app?',
      answers: [
        'Use libraries like NextAuth.js or Auth0 for hassle-free auth setup.',
        'Store JWTs or session cookies to maintain user sessions.',
        'Protect client routes using custom hooks like `useSession()`.',
        'For server-side protection, check auth in `getServerSideProps` or API routes.',
        'Use environment variables to store sensitive auth credentials safely.',
      ],
    },
    {
      question:
        'What is the difference between client-side and server-side rendering?',
      answers: [
        'Client-side rendering (CSR) builds the UI in the browser after loading JavaScript.',
        'Server-side rendering (SSR) sends fully rendered HTML from the server.',
        'SSR improves SEO and initial page load speed.',
        'CSR is better for fast user interactions once loaded.',
        'Next.js supports both, and even hybrids like SSG and ISR.',
      ],
    },
    {
      question: 'How does Next.js handle static file serving?',
      answers: [
        'Put files in the `public/` folder to serve them as-is.',
        'Access them via `/filename` in the browser (e.g., `/logo.png`).',
        'Files in `public/` are not processed by Webpack.',
        'Great for serving images, robots.txt, or static downloads.',
        'Avoid putting large or sensitive files in the public directory.',
      ],
    },
    {
      question: 'What is the role of _app.js and _document.js?',
      answers: [
        '`_app.js` customizes top-level page structure and global styles.',
        'Use `_app.js` to persist layout across pages or wrap providers.',
        '`_document.js` is used to augment HTML and `<head>` tags.',
        'Modifications in `_document.js` affect the initial server response.',
        'Only use `_document.js` for things you can’t do with `_app.js`.',
      ],
    },
    {
      question: 'How do you deploy a Next.js app?',
      answers: [
        'Use platforms like Vercel, Netlify, or traditional servers.',
        'Vercel offers seamless deployment with Next.js support out of the box.',
        'You can export with `next export` for static hosting.',
        'Use `next build` and `next start` for SSR-capable hosting.',
        'Set environment variables and domain settings on your host.',
      ],
    },
    {
      question: 'What are some performance optimization techniques in Next.js?',
      answers: [
        'Use image optimization with the `<Image>` component.',
        'Leverage code-splitting and dynamic imports.',
        'Preload critical resources and prefetch routes.',
        'Implement caching strategies and HTTP headers.',
        'Analyze build with `next build && next analyze`.',
      ],
    },
    {
      question: 'How do you secure a NextJS app?',
      answers: [
        'Use HTTPS and secure cookies for safe data transmission.',
        'Protect routes with authentication and authorization checks.',
        'Set security-related HTTP headers like CSP and X-Frame-Options.',
        'Validate and sanitize user input to prevent XSS and injection attacks.',
        'Use environment variables and avoid exposing secrets in the frontend.',
      ],
    },

    // Add more...
  ];
  export const aspnetMVCQuestions = [
    {
      question: 'What is ASP.NET MVC?',
      answers: [
        'ASP.NET MVC is a framework for building web apps using the Model-View-Controller pattern.',
        'It separates application logic, UI, and input handling for better maintainability.',
        'It provides full control over HTML, CSS, and JavaScript.',
        'It supports test-driven development and clean architecture.',
        'It’s part of the ASP.NET ecosystem and runs on the .NET Framework.',
      ],
    },
    {
      question: 'What are the main components of MVC?',
      answers: [
        'Model represents the data and business logic.',
        'View handles the UI and presentation layer.',
        'Controller processes user input and updates the Model and View.',
        'Each component has a distinct responsibility.',
        'Together, they enable separation of concerns in web apps.',
      ],
    },
    {
      question: 'What is the MVC application life cycle?',
      answers: [
        'Starts with routing the request to the appropriate controller.',
        'Controller processes the request and selects a view.',
        'Model is used to fetch or manipulate data.',
        'View renders the final HTML to the browser.',
        'The response is sent back to the client.',
      ],
    },
    {
      question: 'What is routing in ASP.NET MVC?',
      answers: [
        'Routing maps URLs to controller actions.',
        'Defined in `RouteConfig.cs` using route templates.',
        'Supports default, custom, and attribute-based routes.',
        'Parameters can be passed via the URL.',
        'Helps create clean, SEO-friendly URLs.',
      ],
    },
    {
      question: 'What is a ViewModel in MVC?',
      answers: [
        'A ViewModel is a class that contains data for the view.',
        'It combines multiple models or custom properties for display.',
        'Used to decouple the domain model from the UI.',
        'Improves flexibility and testability of views.',
        'Often used with strongly typed views.',
      ],
    },
    {
      question: 'What is Razor in ASP.NET MVC?',
      answers: [
        'Razor is a markup syntax for embedding server code in HTML.',
        'It uses `@` to switch between HTML and C#.',
        'It’s lightweight and easy to read.',
        'Razor views have `.cshtml` file extensions.',
        'It supports IntelliSense and layout pages.',
      ],
    },
    {
      question:
        'What is the difference between ViewData, ViewBag, and TempData?',
      answers: [
        'ViewData is a dictionary for passing data from controller to view.',
        'ViewBag is a dynamic wrapper around ViewData.',
        'TempData persists data across redirects using session.',
        'ViewData and ViewBag are cleared after the view renders.',
        'Use TempData for short-lived data between requests.',
      ],
    },
    {
      question: 'What are Action Methods in MVC?',
      answers: [
        'Action methods are public methods in a controller.',
        'They handle incoming HTTP requests.',
        'Return types include `ActionResult`, `JsonResult`, `ViewResult`, etc.',
        'They can accept parameters from query strings or forms.',
        'Decorated with attributes like `[HttpGet]`, `[HttpPost]` for routing.',
      ],
    },
    {
      question: 'What is ActionResult in MVC?',
      answers: [
        'ActionResult is a base class for all action return types.',
        'It allows returning different types like views, JSON, files, etc.',
        'Provides flexibility in response generation.',
        'Common derived types include `ViewResult`, `RedirectResult`, `JsonResult`.',
        'Used to abstract the response logic from the controller.',
      ],
    },
    {
      question: 'What is Scaffolding in MVC?',
      answers: [
        'Scaffolding auto-generates code for CRUD operations.',
        'It creates controllers and views based on models.',
        'Speeds up development and prototyping.',
        'Uses templates to generate consistent code.',
        'Can be customized using T4 templates.',
      ],
    },
    {
      question: 'What are HTML Helpers in MVC?',
      answers: [
        'HTML Helpers generate HTML elements in Razor views.',
        'Examples include `Html.TextBox()`, `Html.Label()`, `Html.DropDownList()`.',
        'They simplify form creation and data binding.',
        'Strongly typed helpers use lambda expressions.',
        'Custom helpers can be created for reusable UI logic.',
      ],
    },
    {
      question: 'What is Model Binding in MVC?',
      answers: [
        'Model binding maps form values to action method parameters.',
        'It supports binding to simple types and complex objects.',
        'Uses value providers like query string, form, and route data.',
        'Attributes like `[Bind]`, `[FromBody]` can control binding behavior.',
        'Helps reduce boilerplate code for parsing input.',
      ],
    },
    {
      question: 'What is Validation in MVC?',
      answers: [
        'Validation ensures data meets defined rules before processing.',
        'Data Annotations like `[Required]`, `[StringLength]` are used.',
        'Client-side validation is enabled via unobtrusive JavaScript.',
        'ModelState tracks validation errors in the controller.',
        'Custom validators can be created for complex rules.',
      ],
    },
    {
      question: 'What are Filters in MVC?',
      answers: [
        'Filters run code before or after controller actions.',
        'Types include Authorization, Action, Result, and Exception filters.',
        'Used for logging, caching, error handling, and security.',
        'Can be applied globally, per controller, or per action.',
        'Custom filters can be created by implementing interfaces.',
      ],
    },
    {
      question: 'What is TempData in MVC?',
      answers: [
        'TempData stores data between two requests.',
        'It uses session under the hood.',
        'Commonly used for redirect scenarios.',
        'Data is available only for the next request.',
        'Use `Keep()` or `Peek()` to preserve TempData longer.',
      ],
    },
    {
      question: 'What is the difference between Partial View and Layout View?',
      answers: [
        'Partial View is a reusable view fragment.',
        'Layout View defines the overall page structure.',
        'Partial Views are rendered inside other views.',
        'Layouts use `RenderBody()` and `RenderSection()`.',
        'Both promote DRY and modular design.',
      ],
    },
    {
      question: 'What is Bundling and Minification?',
      answers: [
        'Bundling combines multiple files into one.',
        'Minification removes whitespace and comments.',
        'Improves page load speed by reducing HTTP requests.',
        'Configured in `BundleConfig.cs` using `ScriptBundle` and `StyleBundle`.',
        'Enabled in production mode for performance.',
      ],
    },
    {
      question: 'What is the role of RouteConfig.cs?',
      answers: [
        'It defines the URL routing rules for the app.',
        'Maps URL patterns to controllers and actions.',
        'Default route is usually `{controller}/{action}/{id}`.',
        'Custom routes can be added for flexibility.',
        'Registered in `Global.asax` during app startup.',
      ],
    },
    {
      question: 'What is the use of AntiForgeryToken in MVC?',
      answers: [
        'Prevents Cross-Site Request Forgery (CSRF) attacks.',
        'Generates a hidden token in forms using `@Html.AntiForgeryToken()`.',
        'Validated on POST using `[ValidateAntiForgeryToken]`.',
        'Ensures the request originated from the same site.',
        'Essential for securing form submissions.',
      ],
    },
    {
      question: 'What is the difference between RedirectToAction and Redirect?',
      answers: [
        '`RedirectToAction` redirects to a controller action.',
        '`Redirect` redirects to a specific URL.',
        'RedirectToAction is strongly typed and route-aware.',
        'Redirect is more flexible but less safe.',
        'Use RedirectToAction for internal navigation.',
      ],
    },
    {
      question: 'What is the use of Areas in MVC?',
      answers: [
        'Areas organize large applications into functional sections.',
        'Each area has its own controllers, views, and routes.',
        'Helps manage complexity in enterprise apps.',
        'Registered using `AreaRegistration` class.',
        'Useful for modular development and team collaboration.',
      ],
    },
    {
      question: 'How do you handle exceptions in MVC?',
      answers: [
        'Use `try-catch` blocks in controllers for local handling.',
        'Global filters like `HandleErrorAttribute` catch unhandled exceptions.',
        'Custom error pages can be configured in `web.config`.',
        'Use logging frameworks like Serilog or NLog.',
        'Exception filters can centralize error handling logic.',
      ],
    },
    {
      question: 'What is the difference between WebForms and MVC?',
      answers: [
        'WebForms use event-driven model; MVC uses request-response pattern.',
        'MVC gives full control over HTML and URLs.',
        'WebForms use ViewState; MVC is stateless.',
        'MVC is better suited for testability and clean architecture.',
        'WebForms is page-centric; MVC is controller-centric.',
      ],
    },
    {
      question: 'What is the use of _ViewStart.cshtml?',
      answers: [
        'It sets a common layout for all views in an ASP.NET MVC app.',
        'It runs before every Razor view is rendered.',
        'Placed in the Views folder to automatically apply layouts.',
        'Helps avoid repetitive layout declarations in each view.',
        'Can be overridden locally in specific views if needed.',
      ],
    },
    {
      question: 'What is a strongly typed view in MVC?',
      answers: [
        'A strongly typed view is bound to a specific model type.',
        'It allows compile-time checking and IntelliSense support.',
        'Use `@model` directive to specify the model type at the top of the view.',
        'Helps build form inputs and display fields with type safety.',
        'Improves maintainability and reduces runtime errors.',
      ],
    },
    {
      question: 'What is the use of the ModelState object?',
      answers: [
        'ModelState stores validation status and error messages.',
        'It checks if form data matches the model’s validation rules.',
        'Use `ModelState.IsValid` to verify if the input is valid.',
        'Invalid inputs are automatically highlighted in the view.',
        'It works with data annotations and custom validation.',
      ],
    },
    {
      question: 'What are custom routes in MVC and how are they defined?',
      answers: [
        'Custom routes define specific URL patterns for routing.',
        'They are added in `RouteConfig.cs` using `routes.MapRoute()`.',
        'Parameters like controller, action, and id can be customized.',
        'They provide more control over app URL structure.',
        'Useful for SEO-friendly and user-readable URLs.',
      ],
    },
    {
      question: 'What is the purpose of the Html.BeginForm() method?',
      answers: [
        'It creates a form tag that posts data back to the server.',
        'Accepts parameters like action name, controller, method type.',
        'Ensures form targets a specific action method.',
        'Works with model binding to populate input fields.',
        'Helps generate accessible and structured HTML forms.',
      ],
    },
    {
      question: 'How do you return JSON from an MVC controller?',
      answers: [
        'Use `JsonResult` as the return type of an action method.',
        'Call `Json(data)` to serialize data into JSON format.',
        'Set behavior or formatting options if needed.',
        'Useful for AJAX-based client interactions.',
        'Ensure request is allowed for GET by setting `JsonRequestBehavior.AllowGet`.',
      ],
    },
    {
      question: 'What is attribute routing in MVC?',
      answers: [
        'Attribute routing uses annotations to define routes directly on actions.',
        'Use `[Route("path")]` to set custom paths.',
        'It enables clear and maintainable route definitions.',
        'Supports route parameters and constraints.',
        'Enables fine-grained control over URL patterns.',
      ],
    },
    {
      question: 'What is OutputCache in MVC?',
      answers: [
        'OutputCache stores the output of a controller action temporarily.',
        'It improves performance by reducing repeated computations.',
        'Use `[OutputCache(Duration=60)]` to cache output for 60 seconds.',
        'You can vary cache by parameters using `VaryByParam`.',
        'It works only for GET requests and static responses.',
      ],
    },
    {
      question: 'How do you implement security in MVC?',
      answers: [
        'Use `[Authorize]` attribute to restrict access to actions.',
        'Implement role-based or policy-based authentication.',
        'Use AntiForgeryToken to guard against CSRF attacks.',
        'Encrypt sensitive data and use HTTPS.',
        'Validate input and sanitize output to prevent XSS and SQL injection.',
      ],
    },
    {
      question: 'What is the purpose of Global.asax in MVC?',
      answers: [
        'Global.asax defines application-level events like startup and error handling.',
        'Used to configure routing and filters at app launch.',
        'It supports events like `Application_Start`, `Application_Error`, etc.',
        'Helps in logging, session tracking, or performance monitoring.',
        'Though used less with newer dependency injection patterns, it still has legacy importance.',
      ],
    },
  ];
  export const aspnetwebapiQuestions = [
    {
      question: 'What is ASP.NET Web API?',
      answers: [
        'ASP.NET Web API is a framework for building HTTP-based services.',
        'It supports RESTful architecture and returns data in formats like JSON or XML.',
        'It’s ideal for building lightweight, stateless services for web and mobile apps.',
        'It runs on top of the .NET Framework and integrates with MVC.',
        'Web API simplifies the creation of HTTP services using standard HTTP verbs.',
      ],
    },
    {
      question: 'What are the advantages of using Web API?',
      answers: [
        'It supports multiple formats like JSON, XML, and OData.',
        'It’s lightweight and ideal for devices with limited bandwidth.',
        'It uses standard HTTP methods for CRUD operations.',
        'It’s easy to test and integrates well with client-side frameworks.',
        'It supports content negotiation and self-hosting.',
      ],
    },
    {
      question: 'What is the difference between Web API and WCF?',
      answers: [
        'Web API is designed for RESTful services; WCF supports SOAP and more protocols.',
        'Web API uses HTTP only; WCF supports TCP, MSMQ, and named pipes.',
        'Web API is lightweight and ideal for web apps; WCF is heavier and more configurable.',
        'Web API is easier to use for REST; WCF requires more setup.',
        'WCF is better for enterprise-level, multi-protocol services.',
      ],
    },
    {
      question: 'What are HTTP verbs supported by Web API?',
      answers: [
        'GET – retrieves data from the server.',
        'POST – submits new data to the server.',
        'PUT – updates existing data.',
        'DELETE – removes data from the server.',
        'PATCH – partially updates a resource.',
      ],
    },
    {
      question: 'What is routing in Web API?',
      answers: [
        'Routing maps HTTP requests to controller actions.',
        'Web API supports both convention-based and attribute routing.',
        'Routes are defined in `WebApiConfig.cs` using `MapHttpRoute()`.',
        'Attribute routing uses `[Route("path")]` on actions.',
        'Routing enables clean, RESTful URLs.',
      ],
    },
    {
      question: 'What is content negotiation in Web API?',
      answers: [
        'Content negotiation selects the best response format (JSON, XML, etc.).',
        'It checks the `Accept` header in the HTTP request.',
        'Web API uses formatters like `JsonMediaTypeFormatter` and `XmlMediaTypeFormatter`.',
        'You can customize or add new formatters.',
        'It ensures clients receive data in their preferred format.',
      ],
    },
    {
      question: 'What is parameter binding in Web API?',
      answers: [
        'Parameter binding maps HTTP request data to action method parameters.',
        'It binds from URI, query string, headers, or body.',
        'Use attributes like `[FromUri]`, `[FromBody]` to control binding.',
        'Complex types are bound from the body by default.',
        'Binding is extensible via custom binders.',
      ],
    },
    {
      question:
        'What is the difference between IHttpActionResult and HttpResponseMessage?',
      answers: [
        '`IHttpActionResult` is more testable and abstract.',
        '`HttpResponseMessage` gives full control over the response.',
        'Both are used to return HTTP responses from actions.',
        '`IHttpActionResult` was introduced in Web API 2.',
        'Choose based on flexibility vs simplicity.',
      ],
    },
    {
      question: 'What is dependency injection in Web API?',
      answers: [
        'Dependency injection provides services to controllers via constructor parameters.',
        'Web API supports DI using `IDependencyResolver`.',
        'You can use containers like Unity, Autofac, or Ninject.',
        'DI promotes loose coupling and testability.',
        'Services are registered in `GlobalConfiguration.Configuration.DependencyResolver`.',
      ],
    },
    {
      question: 'What are filters in Web API?',
      answers: [
        'Filters run code before or after controller actions.',
        'Types include Authorization, Action, Exception, and Result filters.',
        'They are used for logging, validation, and error handling.',
        'Filters can be applied globally, per controller, or per action.',
        'Custom filters can be created by implementing filter interfaces.',
      ],
    },
    {
      question: 'What is exception handling in Web API?',
      answers: [
        'Use `try-catch` blocks for local error handling.',
        'Global errors can be handled using `ExceptionFilterAttribute`.',
        'Use `HttpResponseException` to return custom error responses.',
        'You can override `OnException()` in custom filters.',
        'Logging frameworks like ELMAH or Serilog can be integrated.',
      ],
    },
    {
      question: 'What is CORS and how is it enabled in Web API?',
      answers: [
        'CORS (Cross-Origin Resource Sharing) allows cross-domain requests.',
        'Enable it using `EnableCorsAttribute` or `config.EnableCors()`.',
        'You can allow specific origins, headers, and methods.',
        'CORS is essential for browser-based clients accessing APIs.',
        'Web API 2 has built-in support for CORS.',
      ],
    },
    {
      question: 'What is OData in Web API?',
      answers: [
        'OData (Open Data Protocol) enables querying and filtering over HTTP.',
        'It supports features like $filter, $select, $orderby, and $expand.',
        'Web API supports OData via `Microsoft.AspNet.OData` package.',
        'OData enables rich querying of RESTful APIs.',
        'It’s useful for exposing data models with minimal effort.',
      ],
    },
    {
      question: 'What is self-hosting in Web API?',
      answers: [
        'Self-hosting runs Web API in a custom process, not IIS.',
        'Use `HttpSelfHostServer` to configure and start the server.',
        'It’s useful for console apps, Windows services, or microservices.',
        'Gives full control over hosting environment.',
        'Requires manual configuration of routes and services.',
      ],
    },
    {
      question: 'How do you secure a Web API?',
      answers: [
        'Use HTTPS to encrypt communication.',
        'Implement authentication using tokens or OAuth.',
        'Use `[Authorize]` attribute to restrict access.',
        'Validate input to prevent injection attacks.',
        'Enable CORS and CSRF protection as needed.',
      ],
    },
    {
      question: 'What is throttling in Web API?',
      answers: [
        'Throttling limits the number of API requests from a client within a time window.',
        'It prevents abuse, overload, and ensures fair resource usage.',
        'You can configure throttling via message handlers or custom middleware.',
        'Policies can be based on IP, client key, or user identity.',
        'Helps improve API stability and security under high load.',
      ],
    },
    {
      question: 'What is message handler in Web API?',
      answers: [
        'A message handler processes HTTP requests and responses at a low level.',
        'It sits in the pipeline before controller execution.',
        'Used for logging, authentication, compression, and custom headers.',
        'You can create custom handlers by extending `DelegatingHandler`.',
        'Handlers are registered in the message pipeline via `HttpConfiguration`.',
      ],
    },
    {
      question: 'How do you implement versioning in Web API?',
      answers: [
        'Use URI versioning like `/api/v1/products`.',
        'Use custom headers like `api-version`.',
        'Query string parameters can indicate version (e.g., `?v=2`).',
        'Route-based versioning uses route tokens.',
        'Combine versioning strategies for flexibility and backward compatibility.',
      ],
    },
    {
      question: 'What is the use of ApiController in Web API?',
      answers: [
        '`ApiController` simplifies building RESTful services.',
        'It auto-handles model binding, validation, and response formatting.',
        'Provides helper methods like `Ok()`, `BadRequest()`, and `NotFound()`.',
        'Automatically returns HTTP status codes based on logic.',
        'Inherits from `ControllerBase` and is used for pure API controllers.',
      ],
    },
    {
      question:
        'What is the difference between MVC Controller and API Controller?',
      answers: [
        'MVC Controller returns views (HTML); API Controller returns data (JSON/XML).',
        'API Controller inherits from `ApiController` or `ControllerBase`.',
        'MVC focuses on UI rendering; API is optimized for HTTP services.',
        'API Controller uses attribute routing and content negotiation.',
        'They serve different use cases but can co-exist in one project.',
      ],
    },
    {
      question: 'What are media type formatters in Web API?',
      answers: [
        'They handle serialization and deserialization of request and response bodies.',
        'Default formatters include JSON and XML.',
        'You can create custom formatters for CSV, BSON, etc.',
        'Formatters are applied based on content negotiation.',
        'Registered in `GlobalConfiguration.Configuration.Formatters`.',
      ],
    },
    {
      question:
        'What is the difference between synchronous and asynchronous controllers?',
      answers: [
        'Synchronous controllers block threads until processing completes.',
        'Asynchronous controllers use `async` and `await` for non-blocking I/O.',
        'Async improves scalability under high traffic.',
        'Use `Task<IHttpActionResult>` as return type in async actions.',
        'Recommended for long-running database or network calls.',
      ],
    },
    {
      question: 'What are the return types supported in Web API?',
      answers: [
        'Void (no return), `IHttpActionResult`, `HttpResponseMessage`, and entity types.',
        '`IHttpActionResult` is preferred for flexibility and testability.',
        '`HttpResponseMessage` offers full control over headers and content.',
        'Returning objects lets Web API format the output automatically.',
        'Select return type based on response needs and clarity.',
      ],
    },
    {
      question: 'What is token-based authentication in Web API?',
      answers: [
        'It authenticates users using access tokens instead of cookies.',
        'Clients send tokens in the `Authorization` header as Bearer tokens.',
        'OAuth 2.0 is commonly used for token management.',
        'Tokens are issued after login and expire after a defined period.',
        'It’s stateless and ideal for mobile and single-page applications.',
      ],
    },
    {
      question: 'What is the use of Swagger in Web API?',
      answers: [
        'Swagger generates interactive API documentation.',
        'It describes endpoints, parameters, and models in a standardized way.',
        'Allows testing API endpoints directly from the browser.',
        'Uses OpenAPI specification to define services.',
        'Tools like Swashbuckle integrate Swagger into Web API projects.',
      ],
    },
    {
      question: 'How do you test Web API endpoints?',
      answers: [
        'Use Postman or Curl for manual API testing.',
        'Use `HttpClient` in .NET for programmatic requests.',
        'Write unit and integration tests using testing frameworks.',
        'Validate status codes, headers, and content formats.',
        'Swagger UI can also be used for real-time testing.',
      ],
    },
    {
      question: 'How is Web API different from REST?',
      answers: [
        'Web API is a framework; REST is an architectural style.',
        'Web API can implement REST principles like statelessness and resource URIs.',
        'Not all Web APIs are RESTful by default.',
        'REST is a concept; Web API is a concrete implementation.',
        'Web API enables building RESTful HTTP services on .NET.',
      ],
    },
    {
      question: 'What is the role of WebApiConfig.cs?',
      answers: [
        'It configures routing and settings for Web API.',
        'Routes are registered using `config.Routes.MapHttpRoute()`.',
        'Filters, formatters, and dependency resolvers are also configured here.',
        'Called from `Application_Start()` in `Global.asax`.',
        'Acts as the central setup for Web API behavior.',
      ],
    },
    {
      question: 'What is model validation in Web API?',
      answers: [
        'Model validation ensures incoming data meets expected rules.',
        'Use data annotations like `[Required]`, `[Range]`, etc.',
        'Web API validates models automatically during binding.',
        'Use `ModelState.IsValid` to check validation results.',
        'Respond with `BadRequest(ModelState)` when validation fails.',
      ],
    },
    {
      question: 'How do you enable logging in Web API?',
      answers: [
        'Use built-in tracing with `System.Diagnostics`.',
        'Integrate logging frameworks like Serilog or NLog.',
        'Create action filters for logging request/response info.',
        'Log exceptions using global filters or middleware.',
        'Logging helps with monitoring, debugging, and auditing.',
      ],
    },
  ];
  export const jqueryQuestions = [
    {
      question: 'What is jQuery?',
      answers: [
        'jQuery is a fast, lightweight JavaScript library that simplifies DOM manipulation.',
        'It provides cross-browser compatibility and concise syntax.',
        'It streamlines tasks like event handling, animations, and AJAX.',
        'jQuery follows the “write less, do more” philosophy.',
        'It’s widely used for enhancing interactivity in web applications.',
      ],
    },
    {
      question: 'What are the advantages of using jQuery?',
      answers: [
        'Simplifies complex JavaScript tasks with fewer lines of code.',
        'Offers built-in support for AJAX, animations, and effects.',
        'Ensures cross-browser compatibility.',
        'Has a large plugin ecosystem and active community.',
        'Improves development speed and maintainability.',
      ],
    },
    {
      question: 'What is the use of the $() function in jQuery?',
      answers: [
        'It’s a shorthand for `jQuery()` function.',
        'Used to select HTML elements and wrap them in jQuery objects.',
        'Enables chaining of jQuery methods.',
        'Acts as an entry point for DOM manipulation.',
        'Can also be used to execute code on document ready.',
      ],
    },
    {
      question:
        'What is the difference between $(document).ready() and window.onload?',
      answers: [
        '`$(document).ready()` runs when the DOM is fully loaded.',
        '`window.onload` waits for all content including images to load.',
        'jQuery’s ready is faster and more efficient for UI setup.',
        'You can have multiple `ready()` handlers; only one `onload`.',
        'Use `ready()` for initializing scripts early.',
      ],
    },
    {
      question: 'What are jQuery selectors?',
      answers: [
        'Selectors are used to find and select HTML elements.',
        'They are based on CSS selectors with additional jQuery-specific ones.',
        "Examples include `$('#id')`, `$('.class')`, and `$('div')`.",
        'They return jQuery objects for chaining methods.',
        'Efficient selectors improve performance and readability.',
      ],
    },
    {
      question: 'What is chaining in jQuery?',
      answers: [
        'Chaining allows multiple jQuery methods to be called on the same element.',
        'It improves code readability and reduces repetition.',
        'Each method returns the jQuery object for continued chaining.',
        "Example: `$('#box').addClass('active').fadeIn().html('Done')`.",
        'Chaining is a key feature of jQuery’s fluent API.',
      ],
    },
    {
      question: 'How do you handle events in jQuery?',
      answers: [
        'Use `.on()` to bind event handlers to elements.',
        'Common events include `click`, `hover`, `submit`, and `keydown`.',
        'You can delegate events to dynamic elements using `.on()` with selectors.',
        'Use `.off()` to remove event handlers.',
        'jQuery normalizes event handling across browsers.',
      ],
    },
    {
      question: 'What is event delegation in jQuery?',
      answers: [
        'Event delegation binds events to a parent element instead of individual children.',
        'It works by taking advantage of event bubbling.',
        'Useful for handling events on dynamically added elements.',
        'Improves performance by reducing the number of event bindings.',
        "Implemented using `.on('event', 'selector', handler)`.",
      ],
    },
    {
      question: 'What are jQuery effects?',
      answers: [
        'jQuery provides built-in methods for visual effects.',
        'Common effects include `.hide()`, `.show()`, `.fadeIn()`, `.slideUp()`.',
        'Effects can be chained and customized with speed and callback.',
        'They enhance user experience with smooth transitions.',
        'You can create custom animations using `.animate()`.',
      ],
    },
    {
      question: 'What is the difference between .html(), .text(), and .val()?',
      answers: [
        '`.html()` gets or sets HTML content.',
        '`.text()` gets or sets plain text content.',
        '`.val()` gets or sets the value of form elements.',
        'Each method targets different types of content.',
        'Use them appropriately based on the context.',
      ],
    },
    {
      question: 'How do you perform AJAX requests in jQuery?',
      answers: [
        'Use `.ajax()`, `.get()`, or `.post()` methods.',
        'They allow asynchronous communication with the server.',
        'You can specify URL, method, data, and callbacks.',
        'jQuery handles cross-browser differences internally.',
        'Useful for loading data without refreshing the page.',
      ],
    },
    {
      question:
        'What is the difference between .empty(), .remove(), and .detach()?',
      answers: [
        '`.empty()` removes child elements but keeps the parent.',
        '`.remove()` removes the element and its data/events.',
        '`.detach()` removes the element but retains data/events.',
        'Use `.detach()` when you plan to reinsert the element.',
        'Each method serves different cleanup needs.',
      ],
    },
    {
      question: 'What is the use of jQuery.each()?',
      answers: [
        'Iterates over arrays or objects.',
        'Provides index and value in the callback.',
        'Useful for looping through DOM elements or data.',
        'Can break early using `return false`.',
        'It’s a jQuery alternative to native `forEach()`.',
      ],
    },
    {
      question: 'What is the difference between prop() and attr()?',
      answers: [
        '`attr()` gets or sets HTML attributes.',
        '`prop()` gets or sets DOM properties.',
        'Use `prop()` for boolean values like `checked`, `disabled`.',
        '`attr()` reflects the initial HTML; `prop()` reflects current state.',
        'They behave differently for dynamic properties.',
      ],
    },
    {
      question: 'How do you prevent default behavior in jQuery?',
      answers: [
        'Use `event.preventDefault()` inside the event handler.',
        'Prevents actions like form submission or link navigation.',
        'Can be combined with `event.stopPropagation()`.',
        'Useful for custom form validation or UI behavior.',
        'Always pass `event` as a parameter to the handler.',
      ],
    },
    {
      question: 'How do you check if an element exists using jQuery?',
      answers: [
        "Use a selector and check the `.length` property (e.g., `$('#id').length > 0`).",
        'It returns `0` if no matching elements are found.',
        'Can be used in conditionals to guard DOM operations.',
        'Works with classes, tags, and attribute selectors.',
        'Helps prevent runtime errors with undefined elements.',
      ],
    },
    {
      question: 'What is the difference between bind(), live(), and on()?',
      answers: [
        '`bind()` attaches events to existing elements only.',
        '`live()` attaches events to current and future elements but is deprecated.',
        '`on()` is the recommended modern method for event binding.',
        '`on()` supports event delegation for dynamic elements.',
        'Use `on()` for consistent and flexible event management.',
      ],
    },
    {
      question: 'How do you get or set CSS styles using jQuery?',
      answers: [
        "Use `.css('property')` to get a style value.",
        "Use `.css('property', 'value')` to set a single style.",
        "Set multiple styles using an object: `.css({ color: 'red', fontSize: '14px' })`.",
        'Supports computed styles and inline overrides.',
        'Great for dynamic styling based on logic or events.',
      ],
    },
    {
      question: 'How do you traverse the DOM in jQuery?',
      answers: [
        'Use `.parent()`, `.children()`, `.siblings()`, `.next()`, `.prev()`, etc.',
        'Chain traversal methods for complex navigation.',
        'Selectors combined with traversal refine search scope.',
        '`.find()` looks for descendants; `.closest()` climbs up the DOM tree.',
        'Efficient traversal reduces excessive DOM queries.',
      ],
    },
    {
      question: 'What is the use of the data() method in jQuery?',
      answers: [
        'Stores custom data associated with DOM elements.',
        "Retrieve with `.data('key')` and set with `.data('key', value)`.",
        'Provides a cleaner alternative to custom HTML attributes.',
        'Does not affect the HTML source—stores data internally.',
        'Useful for storing state or metadata per element.',
      ],
    },
    {
      question: 'What are jQuery plugins?',
      answers: [
        'Plugins are reusable jQuery methods to extend functionality.',
        'You can use or create custom plugins for specific tasks.',
        'Plugins follow the jQuery chaining pattern.',
        'They encapsulate logic and enhance maintainability.',
        'Examples include sliders, date pickers, tooltips, etc.',
      ],
    },
    {
      question: 'How do you stop event bubbling in jQuery?',
      answers: [
        'Use `event.stopPropagation()` within the event handler.',
        'It prevents the event from propagating to parent elements.',
        '`event.stopImmediatePropagation()` also blocks sibling handlers.',
        'Helps isolate specific interactions like modal clicks.',
        'Can be combined with `preventDefault()` for full control.',
      ],
    },
    {
      question: 'How do you make an element draggable in jQuery?',
      answers: [
        'Use jQuery UI and call `.draggable()` on the element.',
        'Include jQuery UI script and CSS in your project.',
        'Draggable options include axis constraint, grid snapping, etc.',
        'Enhances interactivity with drag-and-drop UIs.',
        'Requires minimal configuration to get started.',
      ],
    },
    {
      question: 'What is the use of serialize() in jQuery?',
      answers: [
        'Converts form data into a URL-encoded query string.',
        'Useful for submitting forms via AJAX.',
        'Use `.serializeArray()` for structured key-value pairs.',
        'Automatically includes all enabled form fields.',
        'Simplifies client-side form handling.',
      ],
    },
    {
      question: 'How do you optimize jQuery performance?',
      answers: [
        'Cache selectors to avoid repeated DOM lookups.',
        'Use event delegation for dynamic content.',
        'Minimize DOM manipulations and reflows.',
        'Use `.each()` and filter methods wisely.',
        'Load jQuery from a CDN to leverage caching.',
      ],
    },
    {
      question: 'Is jQuery still relevant today?',
      answers: [
        'It’s still used in many legacy and enterprise systems.',
        'Provides utility and simplicity for small projects.',
        'Modern frameworks (React, Vue) have reduced new jQuery usage.',
        'It’s useful for quick prototypes and cross-browser scripts.',
        'Still included in CMS platforms like WordPress.',
      ],
    },
    {
      question: 'How do you detect browser or device type using jQuery?',
      answers: [
        'Use `navigator.userAgent` in combination with regex.',
        'jQuery doesn’t offer built-in browser detection methods.',
        'Use feature detection over user agent sniffing when possible.',
        'Plugins like Modernizr can help with capabilities detection.',
        'Always test for functionality instead of browser name.',
      ],
    },
    {
      question:
        'How do you defer jQuery execution until after the DOM is ready?',
      answers: [
        'Wrap code inside `$(document).ready(function() { ... })`.',
        'Or use shorthand: `$(function() { ... })`.',
        'Ensures DOM elements are accessible before manipulation.',
        'Prevents errors due to accessing undefined elements.',
        'It’s equivalent to `DOMContentLoaded` in plain JS.',
      ],
    },
    {
      question:
        'What is the difference between hide() and css("display", "none")?',
      answers: [
        'Both hide elements, but `.hide()` maintains jQuery’s internal state.',
        '`.hide()` can be reversed with `.show()`, while `display: none` requires manual override.',
        '`.hide()` also triggers any associated animation callbacks.',
        'Using `.css()` is lower-level and doesn’t chain show/hide states.',
        'Prefer `.hide()` for better integration with jQuery’s effects.',
      ],
    },
    {
      question: 'How do you bind multiple event types at once in jQuery?',
      answers: [
        'Pass a space-separated list of events to `.on()`.',
        'Example: `$(element).on("mouseenter mouseleave", handler)`.',
        'Use object syntax to attach different handlers for each event.',
        'Efficiently handles related UI behaviors together.',
        'Keeps event code organized and readable.',
      ],
    },
  ];
  export const tailwindQuestions = [
    {
      question: 'What is Tailwind CSS?',
      answers: [
        'Tailwind CSS is a utility-first CSS framework for rapidly building custom designs.',
        'It provides low-level utility classes instead of pre-designed components.',
        'Developers compose styles directly in HTML using class names.',
        'It promotes consistency and reduces the need for writing custom CSS.',
        'Tailwind is highly customizable via a configuration file.',
      ],
    },
    {
      question: 'What are utility classes in Tailwind CSS?',
      answers: [
        'Utility classes are single-purpose classes like `text-center` or `bg-blue-500`.',
        'They apply one specific style rule to an element.',
        'They allow rapid prototyping without writing custom CSS.',
        'They can be combined to create complex designs.',
        'Tailwind provides hundreds of utility classes out of the box.',
      ],
    },
    {
      question: 'What is the purpose of the Tailwind configuration file?',
      answers: [
        'The config file (`tailwind.config.js`) customizes Tailwind’s default settings.',
        'You can define custom colors, spacing, fonts, and breakpoints.',
        'It allows extending or overriding the default theme.',
        'You can enable plugins and purge unused styles here.',
        'It helps tailor Tailwind to your project’s design system.',
      ],
    },
    {
      question: 'How do you install Tailwind CSS?',
      answers: [
        'Install via npm: `npm install -D tailwindcss`.',
        'Initialize config with `npx tailwindcss init`.',
        'Add `@tailwind base`, `components`, and `utilities` to your CSS.',
        'Use a build tool like PostCSS or Vite to compile styles.',
        'Alternatively, use a CDN for quick prototyping.',
      ],
    },
    {
      question: 'What is the difference between Tailwind and Bootstrap?',
      answers: [
        'Tailwind is utility-first; Bootstrap is component-based.',
        'Tailwind offers more design flexibility and customization.',
        'Bootstrap provides pre-styled UI components out of the box.',
        'Tailwind encourages composing styles in HTML; Bootstrap uses predefined classes.',
        'Tailwind has no JavaScript dependencies; Bootstrap includes JS plugins.',
      ],
    },
    {
      question: 'What is responsive design in Tailwind CSS?',
      answers: [
        'Tailwind uses mobile-first breakpoints like `sm:`, `md:`, `lg:`.',
        'You can apply different styles at different screen sizes.',
        'Responsive utilities are prefixed with breakpoint names.',
        'It helps build layouts that adapt to various devices.',
        'Breakpoints can be customized in the config file.',
      ],
    },
    {
      question: 'How do you apply hover and focus states in Tailwind?',
      answers: [
        'Use pseudo-class prefixes like `hover:` and `focus:`.',
        'Example: `hover:bg-blue-500` changes background on hover.',
        'You can chain multiple states like `focus:hover:`.',
        'Tailwind supports many states like `active`, `disabled`, `group-hover`.',
        'State variants can be enabled or extended in the config.',
      ],
    },
    {
      question: 'What is the `container` class in Tailwind?',
      answers: [
        'The `container` class centers and constrains content width.',
        'It applies responsive max-widths based on breakpoints.',
        'You can customize padding and widths in the config.',
        'It’s useful for wrapping page content in a consistent layout.',
        'It works well with grid and flex layouts.',
      ],
    },
    {
      question: 'How do you customize colors in Tailwind?',
      answers: [
        'Extend the `theme.colors` section in `tailwind.config.js`.',
        'Define custom color names and hex values.',
        'Use them in class names like `bg-brand-blue`.',
        'You can override default colors or add new ones.',
        'Tailwind also supports opacity modifiers like `bg-blue-500/50`.',
      ],
    },
    {
      question: 'What is JIT mode in Tailwind CSS?',
      answers: [
        'JIT (Just-In-Time) mode generates styles on demand.',
        'It compiles only the classes you use, reducing file size.',
        'It enables arbitrary values like `mt-[23px]`.',
        'JIT improves build speed and flexibility.',
        'Enabled by default in Tailwind v3 and above.',
      ],
    },
    {
      question: 'How do you purge unused CSS in Tailwind?',
      answers: [
        'Use the `content` array in `tailwind.config.js` to specify file paths.',
        'Tailwind scans these files for class names to include.',
        'Unused styles are removed from the final CSS bundle.',
        'This keeps the output file small and optimized.',
        'JIT mode handles purging automatically during build.',
      ],
    },
    {
      question: 'What are plugins in Tailwind CSS?',
      answers: [
        'Plugins extend Tailwind’s functionality with custom utilities or components.',
        'You can install official or community plugins via npm.',
        'Register them in the `plugins` array of the config file.',
        'Examples include typography, forms, and aspect-ratio plugins.',
        'You can also write your own custom plugins.',
      ],
    },
    {
      question: 'How do you center elements in Tailwind?',
      answers: [
        'Use `mx-auto` to center block elements horizontally.',
        'Use `flex justify-center items-center` for flexbox centering.',
        'Use `grid place-items-center` for grid centering.',
        'Text can be centered with `text-center`.',
        'Absolute centering can be done with `inset-0 m-auto`.',
      ],
    },
    {
      question: 'What is the difference between `hidden` and `invisible`?',
      answers: [
        '`hidden` removes the element from the layout (display: none).',
        '`invisible` hides the element but keeps its space (visibility: hidden).',
        '`hidden` prevents interaction; `invisible` does not.',
        'Use `hidden` for conditional rendering.',
        'Use `invisible` for transitions or animations.',
      ],
    },
    {
      question: 'How do you apply dark mode in Tailwind?',
      answers: [
        "Enable `darkMode: 'class'` or `'media'` in the config.",
        'Use `dark:` prefix to apply styles in dark mode.',
        'Example: `dark:bg-gray-800` sets background in dark mode.',
        'Toggle dark mode by adding `class="dark"` to the root element.',
        'Dark mode styles can be customized like any other utility.',
      ],
    },
    {
      question: 'How do you apply transitions and animations in Tailwind?',
      answers: [
        'Use utility classes like `transition`, `duration-300`, and `ease-in-out`.',
        'Tailwind supports transitions for colors, opacity, transform, etc.',
        'You can control timing with `delay-` and `duration-` classes.',
        'Combine with `hover:` or `focus:` for interactive effects.',
        'Custom animations can be defined in the config using `@keyframes`.',
      ],
    },
    {
      question: 'What is the use of the `aspect-ratio` plugin in Tailwind?',
      answers: [
        'It helps maintain consistent width-to-height ratios for elements.',
        'Use classes like `aspect-w-16 aspect-h-9` for 16:9 ratio.',
        'It’s useful for responsive videos, images, and embeds.',
        'Requires enabling the plugin in `tailwind.config.js`.',
        'Simplifies layout control without manual padding hacks.',
      ],
    },
    {
      question: 'How do you use grid layout in Tailwind CSS?',
      answers: [
        'Use `grid` to define a grid container.',
        'Define columns with `grid-cols-3`, `grid-cols-12`, etc.',
        'Control gaps using `gap-4`, `gap-x-2`, `gap-y-6`.',
        'Use `col-span-` and `row-span-` to control item placement.',
        'Tailwind supports responsive and nested grids.',
      ],
    },
    {
      question:
        'What is the difference between `relative`, `absolute`, and `fixed` in Tailwind?',
      answers: [
        '`relative` positions an element relative to its normal position.',
        '`absolute` positions it relative to the nearest positioned ancestor.',
        '`fixed` positions it relative to the viewport.',
        'Use `top-0`, `left-0`, etc. to control placement.',
        'Each has different use cases for layout and overlays.',
      ],
    },
    {
      question: 'How do you create reusable components in Tailwind?',
      answers: [
        'Use @apply in custom CSS to group utility classes.',
        'Create reusable components with frameworks like React or Vue.',
        'Use Tailwind’s plugin system to define custom utilities.',
        'Leverage component libraries like Tailwind UI or Headless UI.',
        'Consistent naming and design tokens help with reuse.',
      ],
    },
    {
      question: 'What is the purpose of `z-index` in Tailwind?',
      answers: [
        'Controls the stacking order of overlapping elements.',
        'Use classes like `z-0`, `z-10`, `z-50`, or `z-[9999]`.',
        'Higher values appear above lower ones.',
        'Useful for modals, dropdowns, and sticky headers.',
        'Custom values can be added in the config.',
      ],
    },
    {
      question: 'How do you handle forms in Tailwind CSS?',
      answers: [
        'Use utility classes for spacing, borders, and focus states.',
        'Tailwind provides basic styling for inputs and buttons.',
        'Use the `@tailwindcss/forms` plugin for better defaults.',
        'Customize appearance with `rounded`, `shadow`, and `focus:` classes.',
        'Combine with validation and accessibility best practices.',
      ],
    },
    {
      question: 'What is the use of `space-x` and `space-y` utilities?',
      answers: [
        'They add consistent spacing between sibling elements.',
        '`space-x-4` adds horizontal spacing; `space-y-2` adds vertical spacing.',
        'They don’t affect the first or last child’s margin.',
        'Useful for flex and grid layouts.',
        'Simplifies spacing without writing custom margins.',
      ],
    },
    {
      question: 'How do you use pseudo-elements in Tailwind?',
      answers: [
        'Tailwind doesn’t support pseudo-elements like `::before` directly.',
        'Use plugins like `tailwindcss-pseudo-elements` for support.',
        'Alternatively, write custom CSS with `@apply`.',
        'Pseudo-elements are useful for decorative content.',
        'Combine with utility classes for styling.',
      ],
    },
    {
      question: 'What are some best practices when using Tailwind CSS?',
      answers: [
        'Use semantic HTML and meaningful class combinations.',
        'Avoid excessive class duplication—extract components when needed.',
        'Leverage the config file for consistency and scalability.',
        'Use JIT mode and purge settings to optimize output.',
        'Document design patterns and naming conventions for teams.',
      ],
    },
  ];